grammar org.xtext.example.mydsl.Uml with org.eclipse.xtext.common.Terminals

generate uml "http://www.xtext.org/example/mydsl/Uml"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


Program:
	(code+=Statement)*;

Statement:
	Link | Object | Package;
	
	
// LINKS
Link:
	Heritage | Implementation | Relation; 


Relation:
	StrongAggregation | Association;

	
Implementation: 
	'implementation' '(' nameClass1=Object ',' nameClass2=Object ')' ';'
;
	
Heritage:
	'heritage' '(' nameClass1=Object ',' nameClass2=Object ')' ';'
;


// Voir si on a d'autres paramètres ou des paramètres vides
Association: 
	'association' '(' nameClass1=STRING ',' nameClass2=STRING ',' nameLiaison=STRING ',' quantity1=INT ',' quantity2=INT ')' ';'
;

StrongAggregation:
	'strongAssociation' '(' nameClass1=STRING ',' nameClass2=STRING ',' nameLiaison=STRING ',' quantity2=INT ')' ';'
;


// OBJECTS
Object: 
	Class | AbstractClass | Interface | Enum;
	

// Need to review, think that parameter / function can be optional. 

// TODO :: remove double " for class name
ClassContent: name=ID '{'
	'parameter' '{'
		(params+=Parameter)+ 
	'}'
	'function' '{'
		(functions+=Function)+
	'}'
'}'
;

Class: 'class' content=ClassContent;

AbstractClass: 'abstract' class=Class;

// https://www.uml-diagrams.org/class-reference.html
Interface: 'interface' content=ClassContent;



Parameter: visibility=VISIBILITY modifier=MODIFIER type=TYPE name=ID ';';
// Think to the keyword static that can be add at the beginning 

FunctionParameter: modifier=MODIFIER type=TYPE name=ID';';

Function: visibility=VISIBILITY returnType=TYPE name=ID'(' 
	(params+=FunctionParameter)+ 	
')' ';';


Enum: 'enum' name=ID '{' 
	(params+=EnumConstante)+	
'}';


EnumConstante: name=ID ';';



// PACKAGE
// TODO :: Je crois que l'on doit rajouter dans le style que le nom du package doit être définie soit pas une classe ou un nom de package précédement créé.
Package: 'package' name=ID '{' 
	(packageName+=STRING ',')+
'}';




VISIBILITY returns ecore::EChar: 
	'+' | '-' | '#' | '~';

MODIFIER returns ecore::EString:
	'final' | 'const';

TYPE returns ecore::EString:
	'string' | 'int' | 'boolean' | 'long'
;


	