grammar org.xtext.example.mydsl.Uml with org.eclipse.xtext.common.Terminals

generate uml "http://www.xtext.org/example/mydsl/Uml"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


Program:
	(code+=Statement)*;

Statement:
	Link | Object | Package;
	
	
// LINKS
Link:
	Heritage | Implementation | Relation; 


Relation:
	StrongAggregation | Association;

	
Heritage:
	'heritage' '(' nameClass1=Object ',' nameClass2=Object ')' ';'
;


// OBJECTS
Object: 
	Class | AbstractClass | Interface | Enum;
	

// Need to review, think that parameter / function can be optional. 
Class: 'class' name=STRING '{'
	'parameter' '{'
		(params+=Parameter)+ 
	'}'
	'function' '{'
		(functions+=Function)+
	'}'
'}'
;

Parameter: visibility=VISIBILITY modifier=MODIFIER type=TYPE name=STRING ';';
// Think to the keyword static that can be add at the beginning 


Function: visibility=VISIBILITY returnType=TYPE name=STRING '(' 
	(params+=Parameter)+ // TODO :: à revoir car on garde ici que le type et le nom du parametre (pas la visilibité et tout le tralala)	
')' ';';


AbstractClass: 'abstract' class=Class;


// TODO : voir si on peut avoir des fonctions et des paramètres dans un énum
// Ou si constante peut prendre une valeur en paramètre
Enum: 'enum' name=STRING '{' 
	(params+=EnumConstante)+	
'}';


EnumConstante: name=STRING ';';

// PACKAGE
// TODO :: Revoir la définition pour class & package
Package: 'package' '{' 
	(packageName+=STRING ',')+
'}';




VISIBILITY returns ecore::EChar: 
	'+' | '-' | '#' | '~';

MODIFIER returns ecore::EString:
	'final' | 'const';

TYPE returns ecore::EString:
	'string' | 'int' | 'boolean' | 'long'
;


	