/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.uml.Class
import org.xtext.example.mydsl.uml.ClassContent
import com.google.inject.Inject
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.xtext.example.mydsl.uml.DefinedParameter
import org.eclipse.emf.common.util.EList
import org.xtext.example.mydsl.uml.Function

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
 
class UmlGenerator extends AbstractGenerator {
	
	@Inject extension IQualifiedNameProvider
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
		for (e: resource.allContents.toIterable.filter(Class)){
			fsa.generateFile(e.fullyQualifiedName.toString("/") + ".java", e.compile)
		}
	}
		
	private def compile(Class c) '''
		«IF c.eContainer.fullyQualifiedName !== null»
			package «c.eContainer.fullyQualifiedName»;
		«ENDIF»
		
		public class «c.content.name» {
			«IF c.content !== null »
			«c.content.compile»
			«ENDIF»
		}
	'''
	private def compile (ClassContent cc) '''
		«IF cc.params !== null && !cc.params.empty»
			« cc.params.compile»
		«ENDIF»
		
		«IF cc.functions !== null && !cc.functions.empty»
		«cc.functions.compile»
		«ENDIF»
	'''
	
	
	// TODO
	private def compile (EList<?> p) '''
		«IF p !== null && p.class.toString === 'EList<DefinedParameter>'»
			«IF !p.empty»
				/*TODO*/
			«ENDIF»
		«ENDIF»
		
		«IF p !== null && p.class.toString === 'EList<Function>'»
			«IF !p.empty»
				/*TODO*/
			«ENDIF»
		«ENDIF»
	'''
	
	
	
		
}
