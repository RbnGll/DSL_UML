/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.uml.AbstractClass
import org.xtext.example.mydsl.uml.AbstractFunction
import org.xtext.example.mydsl.uml.Class
import org.xtext.example.mydsl.uml.DefinedAttribute
import org.xtext.example.mydsl.uml.Enum
import org.xtext.example.mydsl.uml.Function
import org.xtext.example.mydsl.uml.Extends
import org.xtext.example.mydsl.uml.Implements
import org.xtext.example.mydsl.uml.Interface
import org.xtext.example.mydsl.uml.InterfaceFunction
import org.xtext.example.mydsl.uml.Link
import org.xtext.example.mydsl.uml.StaticAttribute
import org.xtext.example.mydsl.uml.UmlObject
import org.xtext.example.mydsl.uml.ClassicFunction

// TODO
/*
 * - Implement the interface method implementation
 * - Add the constructor workflow
 * - Add the constructed types as function parameter
 * - Class modifier
 * - Packages
 */

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
 
class UmlGenerator extends AbstractGenerator {
	var links = newArrayList() 		// This list is used to keep a memory state of all links in order to process them after file generation
	var interfaces = newArrayList() // This list is super useful to implement super interface methods, otherwise we must use reflection
		
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		// After each save, clear the previously stored links and interfaces
		links.clear();
		interfaces.clear();
		
		// Then save all the links and interfaces to their respective collection for later purpose 
		links.addAll(resource.allContents.toIterable.filter(Link).toList)
		interfaces.addAll(resource.allContents.toIterable.filter(Interface).toList)
		
		// For every java object, create a corresponding file and generate it's inner code with the compile method
		for (umlObject: resource.allContents.toIterable.filter(UmlObject)){
			if(umlObject instanceof Class) fsa.generateFile((umlObject as Class).name + ".java", umlObject.compile());
			if(umlObject instanceof AbstractClass) fsa.generateFile((umlObject as AbstractClass).name+ ".java", umlObject.compile());
			if(umlObject instanceof Interface) fsa.generateFile((umlObject as Interface).name+".java", umlObject.compile);
			if(umlObject instanceof Enum) fsa.generateFile((umlObject as Enum).name+".java", umlObject.compile);
		}
		
		
	}
	/**
	 * A method called every time a umlObject is generated
	 * It searchs if there's an explicit superclass in the stored links and return the corresponding extends tag
	 * i.e : "extends superClass"
	 */
	def String processExtendLinks(UmlObject umlObject){
		var res = "extends "
		var isExtend = false
		val umlExtends = links.filter(Extends).toList
		for (link: umlExtends){
			if( (umlObject instanceof Class && link.childrenClass == (umlObject as Class).name) ||
				(umlObject instanceof AbstractClass && link.childrenClass == (umlObject as AbstractClass).name) ||
				(umlObject instanceof Interface && link.childrenClass == (umlObject as Interface).name)
			){
				isExtend = true
				res += link.superClass
			}
		
		}
		return isExtend ? res : ""
	}
	
	/**
	 * A method called every time a umlObject is generated
	 * It searchs if there's any explicit superInterface in the stored links and return the corresponding implements tag
	 * i.e : "implements Interface1, Interface2, ..."
	 */
	def String processImplementLinks(UmlObject umlObject){
		var res = "implements "
		var isImplements = false
		var numberImplemented = 0;
		for (link: links.filter(Implements).toList){
			if( (umlObject instanceof Class && link.childrenClass == (umlObject as Class).name) ||
				(umlObject instanceof AbstractClass && link.childrenClass == (umlObject as AbstractClass).name) ||
				(umlObject instanceof Interface && link.childrenClass == (umlObject as Interface).name)
			){
				isImplements = true
				numberImplemented++
				res += link.motherClass
				if(numberImplemented>1) res+=", "
			}
		}
		if (numberImplemented>1) res = res.substring(0, res.length-2)// Delete the last useless blank space and comma
		return isImplements ? res+" " : "" 
	}
	/**
	 * A method called every time a umlObject is generated
	 * It returns the corresponding link tag
	 * i.e : "extends superClass implements Interface1"
	 */
	def String processUmlObject(UmlObject umlObject){
		var res = "";
		res += processExtendLinks(umlObject)
		if(!res.isEmpty) res+=" "
		res += processImplementLinks(umlObject)
		return res;
	}
	
	/**
	 * For every *.java file created, if the Class, or AbstractClass implements an interface, 
	 * It returns a String with the implementation of super interfaces methods
	 */
	def String getMethodsToImplement(UmlObject umlObject){
		if(!(umlObject instanceof Class || umlObject instanceof AbstractClass)) return ""
		var methods = newArrayList()
		var res = ""
		
		// First, retrieve the name of the interfaces implemented by the umlObject
		val superInterfaces = links.filter(Implements)
							.filter[implements | implements.childrenClass.equals(umlObject.name)]
							.map[implements | implements.motherClass]
		
		// Then, for all interface name found, add the interface function to a list					
		for (String interfaceName : superInterfaces){
			var mother = interfaces.filter(Interface).filter[interface | interface.name.equals(interfaceName)].head
			if(mother !== null){
				for (InterfaceFunction function : mother.functions){
					methods.add(function)
				}
			}
		}
		
		for (InterfaceFunction function: methods){
			switch(function.visibility.charValue){
				case new Character('#') : res+="protected "
				case new Character('-') : res+="private "
				default : res+="public "
			}
			res += function.returnType + " " + function.name + "("+compileFunctionParameters(function as Function)+")"+"{\n\t// TODO - Implemented method\n}\n"
		}
		
		return res;
	}	
	
	/**
	 * For a given function, it returns a string containing all the parameters 
	 */
	def compileFunctionParameters(Function function){
		var res = ""
		for(param: function.params){
			if (param.final !== null){
				res += "final "
			}
			res+=param.type + " "+param.name+", "
		}
		if (res.length > 2) return res.substring(0, res.length - 2)
		return res
	}
	
	/**
	 * Generate the skeleton of a given class and compiles it's content
	 */
	private dispatch def compile(Class c) '''
		public class «c.name» «processUmlObject(c)»{
			«IF c.attributes !== null && !c.attributes.empty»«c.attributes.compile»«ENDIF»«IF c.functions !== null && !c.functions.empty»«c.functions.compile»«ENDIF»
			«getMethodsToImplement(c)»
		}'''
	/**
	 * Generate the code for a given abstract class
	 */
	private dispatch def compile (AbstractClass aClass)'''
		public abstract class «aClass.name» «processUmlObject(aClass)»{
			«aClass.attributes.compile»
			«aClass.functions.compile»
		}'''
		
		
	
	/**
	 * Generate the code for an interface
	 */
	private dispatch def compile (Interface umlInterface)'''
		public interface «umlInterface.name» {
			«umlInterface.functions.compile»
		}'''
	/**
	 * Generate the code for an enum
	 */
	private dispatch def compile (Enum umlEnum)'''
		public enum «umlEnum.name» {
			«FOR umlEnumConstant: umlEnum.params»
				«umlEnumConstant.name»,
			«ENDFOR»
		}'''
	
	/**
	 * All ELists<T> should be compiled here, because of Java erasure
	 * Basically, the Java compiler deletes the generic type contained in the list for overridden methods.
	 * As CharSequence.compile() is overridden several times, the generic type is erased, resulting in multiple methods with the same signature
	 * 
	 * Retrieving the generic type contained in a list is a very annoying task to perform, 
	 * we therefore used a workaround by assuming that each EList should only contain a single type
	 * we can then test the class type of the first element of that list 
	 */
	private dispatch def compile(EList<?> list) '''
		«IF !list.empty»
			«IF list.get(0) instanceof DefinedAttribute»
				«FOR param : list as EList<DefinedAttribute>»
					«IF param.visibility.charValue == new Character('#')»protected«ELSEIF param.visibility.charValue == new Character('-')»private«ELSE»public«ENDIF» «IF param instanceof StaticAttribute»static «ENDIF»«IF param.final !== null»final «ENDIF»«param.type» «param.name»;
				«ENDFOR»	
			«ELSEIF list.get(0) instanceof InterfaceFunction»
				«FOR function : list as EList<InterfaceFunction>»
					«IF function instanceof InterfaceFunction»
						«function.compile»
					«ENDIF»
				«ENDFOR»
			«ELSEIF list.get(0) instanceof Function»
				«FOR function : list as EList<Function>»
					«function.compile»
				«ENDFOR»
			«ELSEIF list.get(0) instanceof AbstractFunction»
				«FOR function : list as EList<AbstractFunction>»
					«function.compile»
				«ENDFOR»
			«ENDIF»
		«ENDIF»'''
					
	/**
	 * Generate the code for a given Function
	 */
	private dispatch def compile (ClassicFunction function) '''
	«IF function.visibility.charValue == new Character('#')»protected «ELSEIF function.visibility.charValue == new Character('-')»private «ELSE»public «ENDIF»«IF function.static !== null»static «ENDIF»«IF function.final !== null»final «ENDIF»«function.returnType»«IF function.name !== null» «function.name»«ENDIF»(«compileFunctionParameters(function as Function)»){
		// TODO - Auto generated method
	}'''
	/**
	 * Generate the code for a given interface function
	 */
	private dispatch def compile (InterfaceFunction function) '''
		«IF function.visibility.charValue == new Character('#')»protected «ELSEIF function.visibility.charValue == new Character('-')»private «ELSE»public «ENDIF»«IF function.static !== null»static «ENDIF»«IF function.final !== null»final «ENDIF»«function.returnType»«IF function.name !== null» «function.name»«ENDIF»(«compileFunctionParameters(function as Function)»);'''
	/**
	 * Generate the code for a given abstract function
	 */
	private dispatch def compile (AbstractFunction function)'''
		«IF function.visibility.charValue == new Character('#')»protected «ELSEIF function.visibility.charValue == new Character('-')»private «ELSE»public «ENDIF»«IF function.abstract !== null»abstract «ENDIF»«IF function.static !== null»static «ENDIF»«IF function.final !== null»final «ENDIF»«function.returnType»«IF function.name !== null» «function.name»«ENDIF»(«compileFunctionParameters(function as Function)»){
			// TODO - Auto generated method
		}''' 
}
