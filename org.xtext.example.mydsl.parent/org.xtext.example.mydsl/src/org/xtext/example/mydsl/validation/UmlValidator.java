/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.validation;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;
import org.xtext.example.mydsl.uml.EnumConstant;
import org.xtext.example.mydsl.uml.Extends;
import org.xtext.example.mydsl.uml.Implements;
import org.xtext.example.mydsl.uml.Interface;
import org.xtext.example.mydsl.uml.Link;
import org.xtext.example.mydsl.uml.Program;
import org.xtext.example.mydsl.uml.Relation;
import org.xtext.example.mydsl.uml.Statement;
import org.xtext.example.mydsl.uml.UmlObject;
import org.xtext.example.mydsl.uml.UmlPackage;
import org.xtext.example.mydsl.uml.AbstractClass;
import org.xtext.example.mydsl.uml.Class;
import org.xtext.example.mydsl.uml.Enum;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class UmlValidator extends AbstractUmlValidator {
	public static final String INVALID_NAME = "invalidName";
	public static final String UNDECLARED_CLASS = "undeclaredClass";
	public static final String ENUM_VALUES_CAPITAL = "enumValueAllCaps";
	public static final String DUPLICATE_ATTRIBUTES = "duplicateAttributes";
	public static final String DUPLICATE_OBJECT_NAME= "duplicateObjectName";
	
	//
	@Check
	public void checkInterfaceNameStartsWithCapital(UmlObject o) {
	    if (!Character.isUpperCase(o.getName().charAt(0))) {
	        warning("Name should start with a capital",
	            UmlPackage.Literals.UML_OBJECT__NAME,
	            INVALID_NAME);
	    }
	}
	
	@Check
    public void checkEnumValuesShouldBeUpperCase(EnumConstant enumValue) {
		Boolean bool = false;
		String enumName = enumValue.getName();
        for (int i = 0; i < enumName.length(); i++) {
            if (!Character.isUpperCase(enumName.charAt(i))) {
                bool = true;
            }
        }
        if (bool) warning("Enum constants names should be capitals", UmlPackage.Literals.ENUM_CONSTANT__NAME, ENUM_VALUES_CAPITAL);
    }
	
	@Check
	public void checkUmlObjectNamesAllDifferent(UmlObject umlobj) {
		List<String> names = getUmlObjectsNames(umlobj);
		if(Collections.frequency(names, umlobj.getName()) > 1) {
			error("Object name must be unique", UmlPackage.Literals.UML_OBJECT__NAME, DUPLICATE_OBJECT_NAME);
		}
	}
	
	@Check
	public void checkClassAttributesAllDifferent(Class c) {
		List<String> names = new ArrayList<>();
		c.getAttributes().forEach(att -> names.add(att.getName()));
		if(names.stream().anyMatch(i -> Collections.frequency(names, i) >1)) {
			error("All attributes should had different name in a same class", UmlPackage.Literals.CLASS__ATTRIBUTES, DUPLICATE_ATTRIBUTES);
		}
	}
	
	@Check
	public void checkClassFunctionsAllDifferent(Class c) {
		List<String> names = new ArrayList<>();
		c.getFunctions().forEach(fun -> names.add(fun.getName()));
		if(names.stream().anyMatch(i -> Collections.frequency(names, i) >1)) {
			error("All functions should had different name in a same class", UmlPackage.Literals.CLASS__FUNCTIONS, DUPLICATE_ATTRIBUTES);
		}
	}
	
	@Check
	public void checkAbstractClassAttributesAllDifferent(AbstractClass c) {
		List<String> names = new ArrayList<>();
		c.getAttributes().forEach(att -> names.add(att.getName()));
		if(names.stream().anyMatch(i -> Collections.frequency(names, i) >1)) {
			error("All attributes should had different name in a same class", UmlPackage.Literals.ABSTRACT_CLASS__ATTRIBUTES, DUPLICATE_ATTRIBUTES);
		}
	}
	
	@Check
	public void checkClassFunctionsAllDifferent(AbstractClass c) {
		List<String> names = new ArrayList<>();
		c.getFunctions().forEach(fun -> names.add(fun.getName()));
		if(names.stream().anyMatch(i -> Collections.frequency(names, i) > 1)) {
			error("All functions should had different name in a same class", UmlPackage.Literals.ABSTRACT_CLASS__FUNCTIONS, DUPLICATE_ATTRIBUTES);
		}
	}
	
	@Check
	public void checkInterfaceFunctionsAllDifferent(Interface inter) {
		List<String> names = new ArrayList<>();
		inter.getFunctions().forEach(fun -> names.add(fun.getName()));
		if(names.stream().anyMatch(i -> Collections.frequency(names, i) > 1)) {
			error("All functions should had different name in a same class", UmlPackage.Literals.INTERFACE__FUNCTIONS, DUPLICATE_ATTRIBUTES);
		}
	}
	
	@Check
	public void checkClass1ExistInLink(Link l) {
		List<String> names = getUmlObjectsNames(l);
		String className;
		if (l instanceof Extends) {
			className = ((Extends)l).getChildrenClass();
			if(!names.contains(className)) {
				error("Class '"+ className + "' have not been declared", UmlPackage.Literals.EXTENDS__CHILDREN_CLASS, UNDECLARED_CLASS);
			}
		}else if (l instanceof Implements){
			className =((Implements)l).getChildrenClass();
			if(!names.contains(className)) {
				error("Class '"+ className + "' have not been declared", UmlPackage.Literals.IMPLEMENTS__CHILDREN_CLASS, UNDECLARED_CLASS);
			}
		}else if (l instanceof Relation){
			className =((Relation)l).getNameClass1();
			if(!names.contains(className)) {
				error("Class '"+ className + "' have not been declared", UmlPackage.Literals.RELATION__NAME_CLASS1, UNDECLARED_CLASS);
			}
		}
	}
	
	@Check
	public void checkClass2ExistInLink(Link l) {
		List<String> names = getUmlObjectsNames(l);
		String className;
		if (l instanceof Extends) {
			className = ((Extends)l).getSuperClass();
			if(!names.contains(className)) {
				error("Class '"+ className + "' have not been declared", UmlPackage.Literals.EXTENDS__SUPER_CLASS, UNDECLARED_CLASS);
			}
		}else if (l instanceof Implements){
			className =((Implements)l).getMotherClass();
			if(!names.contains(className)) {
				error("Class '"+ className + "' have not been declared", UmlPackage.Literals.IMPLEMENTS__MOTHER_CLASS, UNDECLARED_CLASS);
			}
		}else if (l instanceof Relation){
			className =((Relation)l).getNameClass2();
			if(!names.contains(className)) {
				error("Class '"+ className + "' have not been declared", UmlPackage.Literals.RELATION__NAME_CLASS2, UNDECLARED_CLASS);
			}
		}
	}
	
	public List<String> getUmlObjectsNames(EObject object) {
		List<String> names = new ArrayList<>();
		EObject container = object.eContainer();
		while (!(container instanceof Program)) {
			container = container.eContainer();
		}
		Program program = (Program) container;
		program.getCode().stream().filter(o -> o instanceof UmlObject).forEach(o -> names.add(((UmlObject)o).getName()));
		return names;
	}

}
